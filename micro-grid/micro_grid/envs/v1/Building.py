from micro_grid.envs.v1.Ambient import Ambient
from micro_grid.envs.v1.Solar import Solar
from micro_grid.envs.v1.Battery import Battery


class Building:
    """Class representing a building in the microgrid, can have energy sources and a battery, has inhabitants and a
    """

    def __init__(self, seed: int, energy_sources: list, battery: Battery, inhabs: int, ambient: Ambient):
        self.seed = seed
        self.energy_sources = energy_sources
        self.battery = battery
        if(inhabs < 0):
            inhabs = 0
        if(inhabs > 3):
            inhabs = 3
        self.inhabs = inhabs
        self.ambient = ambient
        self.hourly_power_given = 0
    # Helper function

    def sum_sources(self, ambient=None) -> float:
        """Sums up all of the available power generated by available energy sources

        Args:
            ambient (_type_, optional): The Ambient of the environment. Defaults to None.

        Returns:
            float: The sum of available power generated by the building
        """
        if(ambient is None):
            ambient = self.ambient
        sum = 0
        for source in self.energy_sources:
            if type(source) is Solar:
                sum += source.get_power(ambient)
        return sum

    # Asks how much power is ready to be send
    def get_power(self, ambient=None) -> float:
        """Sums up the total power available in the building

        Args:
            ambient (_type_, optional): The Ambient of the environment Defaults to None.

        Returns:
            float: The total power available at the building
        """
        if(ambient is None):
            ambient = self.ambient
        sum = self.sum_sources(ambient)
        sum += self.battery.get_fuel()
        return sum
    # Consumes power out of building

    def consume_power(self, power: float, ambient=None) -> float:
        """Drains power from the building

        Args:
            power (float): Amount of power to be drained
            ambient (_type_, optional): The Ambient of the environment. Defaults to None.

        Returns:
            float: The power that was taken from the house.
        """
        if(ambient is None):
            ambient = self.ambient
        sum = self.sum_sources(ambient)
        if sum < power:
            sum += self.battery.get_power(power-sum)
        return sum
    # Power consumption of building

    def power_consumption(self, ambient=None) -> float:
        """The power consumption of the building in a timestep

        Args:
            ambient (_type_, optional): The Ambient of the environment. Defaults to None.

        Returns:
            float: The consumption of the building at the given time step
        """
        if(ambient is None):
            ambient = self.ambient
        consumption_per_year = [1_958, 3_196, 4_919]
        own_year_consumption = consumption_per_year[self.inhabs-1]
        own_day_consumption = own_year_consumption/365.25
        hourly_consumption = own_day_consumption/24
        actual_consumption = 0
        if(ambient.is_night()):
            actual_consumption = hourly_consumption*0.25
        else:
            actual_consumption = hourly_consumption*1.75
        return actual_consumption

    def render(self) -> list:
        """The state of the building with only important information.

        Returns:
            list: Power consumption and Available power of the building at time step.
        """
        return [self.power_consumption(), self.get_power()]

    def receive_power(self, power: float):
        """Power given to the Building for use in the time step

        Args:
            power (float): given power
        """
        self.hourly_power_given += power

    def step(self):
        """Performs a time step for the building.
        Checks if energy needs to be bought and resets given power.
        """
        # Has to buy power
        pw = self.power_consumption()
        if(self.hourly_power_given+self.battery.get_fuel() < pw):
            pw -= self.hourly_power_given
            pw -= self.battery.get_power(pw)
            self.ambient.buy_energy(pw)
        # Loads battery with excess power
        elif(self.hourly_power_given > pw):
            self.battery.set_power(self.hourly_power_given-pw)
        # Does not need to buy power
        else:
            pw -= self.hourly_power_given
            self.battery.get_power(pw)
        self.hourly_power_given = 0

    def reset(self):
        """Resets the building and battery of the building
        """
        self.battery.reset()
        self.hourly_power_given = 0
